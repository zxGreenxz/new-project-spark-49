import { supabase } from "@/integrations/supabase/client";
import { getActiveTPOSToken, getTPOSHeaders } from "./tpos-config";

// =====================================================
// TYPES
// =====================================================

interface TPOSProductVariant {
  Id: number;
  DefaultCode: string;
}

interface TPOSProductResponse {
  Id: number;
  DefaultCode: string;
  ImageUrl: string | null;
  PurchasePrice: number;
  ListPrice: number;
  ProductVariants: TPOSProductVariant[];
}

interface TPOSVariantResponse {
  Id: number;
  DefaultCode: string;
  NameTemplate: string;
  PriceVariant: number;        // Gi√° b√°n c·ªßa variant
  StandardPrice: number;       // Gi√° mua c·ªßa variant
  QtyAvailable: number;        // S·ªë l∆∞·ª£ng th·ª±c t·∫ø
  VirtualAvailable: number;    // S·ªë l∆∞·ª£ng d·ª± b√°o
  ImageUrl: string | null;
  Barcode: string | null;
  AttributeValues: Array<{
    Name: string;
    AttributeName: string;
  }>;
}

export interface SyncProgress {
  current: number;
  total: number;
  success: number;
  failed: number;
  skipped: number;
  logs: string[];
}

export interface SyncResult {
  success: boolean;
  productCode: string;
  message: string;
  variantsUpdated: number;
}

// =====================================================
// CORE SYNC FUNCTIONS
// =====================================================

/**
 * Fetch chi ti·∫øt s·∫£n ph·∫©m t·ª´ TPOS API
 */
async function fetchTPOSProductDetail(
  tposProductId: number,
  bearerToken: string
): Promise<TPOSProductResponse | null> {
  try {
    const url = `https://tomato.tpos.vn/odata/ProductTemplate(${tposProductId})?$expand=UOM,UOMCateg,Categ,UOMPO,POSCateg,Taxes,SupplierTaxes,Product_Teams,Images,UOMView,Distributor,Importer,Producer,OriginCountry,ProductVariants($expand=UOM,Categ,UOMPO,POSCateg,AttributeValues)`;
    
    const response = await fetch(url, {
      method: "GET",
      headers: getTPOSHeaders(bearerToken),
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    // API m·ªõi tr·∫£ v·ªÅ object tr·ª±c ti·∫øp (kh√¥ng c√≥ .value array)
    if (!data || !data.Id) {
      return null;
    }
    
    return data;
  } catch (error) {
    console.error(`Error fetching TPOS product ${tposProductId}:`, error);
    return null;
  }
}

/**
 * ƒê·ªìng b·ªô 1 s·∫£n ph·∫©m
 */
async function syncSingleProduct(
  productId: string,
  tposProductId: number,
  bearerToken: string
): Promise<SyncResult> {
  try {
    // 1. Fetch chi ti·∫øt t·ª´ TPOS
    const tposData = await fetchTPOSProductDetail(tposProductId, bearerToken);
    
    if (!tposData) {
      return {
        success: false,
        productCode: `ID:${tposProductId}`,
        message: "Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ TPOS",
        variantsUpdated: 0,
      };
    }

    let variantsUpdated = 0;

    // 2. C·∫≠p nh·∫≠t tpos_image_url, purchase_price, selling_price cho s·∫£n ph·∫©m cha
    const updateData: any = {};
    if (tposData.ImageUrl) updateData.tpos_image_url = tposData.ImageUrl;
    if (tposData.PurchasePrice !== undefined && tposData.PurchasePrice !== null) {
      updateData.purchase_price = tposData.PurchasePrice;
    }
    if (tposData.ListPrice !== undefined && tposData.ListPrice !== null) {
      updateData.selling_price = tposData.ListPrice;
    }

    if (Object.keys(updateData).length > 0) {
      const { error: updateError } = await supabase
        .from("products")
        .update(updateData)
        .eq("id", productId);

      if (updateError) {
        console.error("Error updating product:", updateError);
      }
    }

    // 2.5. C·∫≠p nh·∫≠t gi√° cho variants n·∫øu ch√∫ng ƒëang c√≥ gi√° = 0
    if (tposData.ListPrice || tposData.PurchasePrice) {
      // Ch·ªâ update selling_price cho variants ƒëang c√≥ gi√° = 0
      if (tposData.ListPrice) {
        const { error: variantSellingError } = await supabase
          .from("products")
          .update({ selling_price: tposData.ListPrice })
          .eq("base_product_code", tposData.DefaultCode)
          .eq("selling_price", 0);
        
        if (!variantSellingError) {
          console.log(`Updated selling_price for variants with base_product_code: ${tposData.DefaultCode}`);
        }
      }
      
      // Ch·ªâ update purchase_price cho variants ƒëang c√≥ gi√° = 0
      if (tposData.PurchasePrice) {
        const { error: variantPurchaseError } = await supabase
          .from("products")
          .update({ purchase_price: tposData.PurchasePrice })
          .eq("base_product_code", tposData.DefaultCode)
          .eq("purchase_price", 0);
        
        if (!variantPurchaseError) {
          console.log(`Updated purchase_price for variants with base_product_code: ${tposData.DefaultCode}`);
        }
      }
    }

    // 3. C·∫≠p nh·∫≠t base_product_code cho c√°c bi·∫øn th·ªÉ con
    if (tposData.ProductVariants && tposData.ProductVariants.length > 0) {
      for (const variant of tposData.ProductVariants) {
        const { error: variantError } = await supabase
          .from("products")
          .update({ base_product_code: tposData.DefaultCode })
          .eq("productid_bienthe", variant.Id);

        if (!variantError) {
          variantsUpdated++;
        }
      }
    }

    return {
      success: true,
      productCode: tposData.DefaultCode,
      message: `C·∫≠p nh·∫≠t ·∫£nh + gi√° + ${variantsUpdated} variants`,
      variantsUpdated,
    };
  } catch (error) {
    console.error(`Error syncing product ${productId}:`, error);
    return {
      success: false,
      productCode: `ID:${tposProductId}`,
      message: error instanceof Error ? error.message : "Unknown error",
      variantsUpdated: 0,
    };
  }
}

/**
 * ƒê·ªìng b·ªô t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi batch processing
 */
export async function syncAllProducts(
  onProgress: (progress: SyncProgress) => void
): Promise<void> {
  const BATCH_SIZE = 5;
  const DELAY_BETWEEN_BATCHES = 200;

  // 1. L·∫•y token
  const bearerToken = await getActiveTPOSToken();
  if (!bearerToken) {
    throw new Error("Kh√¥ng t√¨m th·∫•y TPOS bearer token");
  }

  // 2. L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ tpos_product_id (v·ªõi ph√¢n trang)
  let allProducts: any[] = [];
  let page = 0;
  const pageSize = 1000;

  onProgress({
    current: 0,
    total: 0,
    success: 0,
    failed: 0,
    skipped: 0,
    logs: ["üìä ƒêang t·∫£i danh s√°ch s·∫£n ph·∫©m..."],
  });

  while (true) {
    const { data, error } = await supabase
      .from("products")
      .select("id, product_code, tpos_product_id")
      .not("tpos_product_id", "is", null)
      .order("created_at", { ascending: false })
      .range(page * pageSize, (page + 1) * pageSize - 1);
    
    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }
    
    if (!data || data.length === 0) break;
    
    allProducts.push(...data);
    
    onProgress({
      current: 0,
      total: 0,
      success: 0,
      failed: 0,
      skipped: 0,
      logs: [`üìä ƒê√£ t·∫£i ${allProducts.length} s·∫£n ph·∫©m...`],
    });
    
    if (data.length < pageSize) break;
    page++;
  }

  const products = allProducts;

  if (!products || products.length === 0) {
    throw new Error("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn ƒë·ªìng b·ªô");
  }

  const total = products.length;
  const progress: SyncProgress = {
    current: 0,
    total,
    success: 0,
    failed: 0,
    skipped: 0,
    logs: [],
  };

  // 3. X·ª≠ l√Ω t·ª´ng batch
  for (let i = 0; i < products.length; i += BATCH_SIZE) {
    const batch = products.slice(i, i + BATCH_SIZE);
    
    // X·ª≠ l√Ω song song c√°c s·∫£n ph·∫©m trong batch
    const results = await Promise.all(
      batch.map((product) =>
        syncSingleProduct(product.id, product.tpos_product_id!, bearerToken)
      )
    );

    // C·∫≠p nh·∫≠t progress
    for (const result of results) {
      progress.current++;
      
      if (result.success) {
        progress.success++;
        progress.logs.unshift(
          `‚úÖ ${result.productCode}: ${result.message}`
        );
      } else {
        progress.failed++;
        progress.logs.unshift(
          `‚ùå ${result.productCode}: ${result.message}`
        );
      }

      // Gi·ªõi h·∫°n logs ·ªü 100 d√≤ng
      if (progress.logs.length > 100) {
        progress.logs.pop();
      }
    }

    onProgress({ ...progress });

    // Delay gi·ªØa c√°c batch (tr·ª´ batch cu·ªëi)
    if (i + BATCH_SIZE < products.length) {
      await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
    }
  }
}

// =====================================================
// VARIANT SYNC FUNCTIONS
// =====================================================

/**
 * Fetch chi ti·∫øt variant t·ª´ TPOS API
 */
async function fetchTPOSVariantDetail(
  productIdBienThe: number,
  bearerToken: string
): Promise<TPOSVariantResponse | null> {
  try {
    const url = `https://tomato.tpos.vn/odata/Product(${productIdBienThe})?$expand=UOM,Categ,UOMPO,POSCateg,AttributeValues`;
    
    const response = await fetch(url, {
      method: "GET",
      headers: getTPOSHeaders(bearerToken),
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data || !data.Id) {
      return null;
    }
    
    return data;
  } catch (error) {
    console.error(`Error fetching TPOS variant ${productIdBienThe}:`, error);
    return null;
  }
}

/**
 * ƒê·ªìng b·ªô 1 variant
 */
async function syncSingleVariant(
  productId: string,
  productIdBienThe: number,
  bearerToken: string
): Promise<SyncResult> {
  try {
    // 1. Fetch chi ti·∫øt variant t·ª´ TPOS
    const tposData = await fetchTPOSVariantDetail(productIdBienThe, bearerToken);
    
    if (!tposData) {
      return {
        success: false,
        productCode: `ID:${productIdBienThe}`,
        message: "Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ TPOS",
        variantsUpdated: 0,
      };
    }

    // 2. Build variant text t·ª´ AttributeValues
    const variantText = tposData.AttributeValues
      ?.map(attr => attr.Name)
      .join(', ') || '';

    // 3. C·∫≠p nh·∫≠t variant v·ªõi d·ªØ li·ªáu m·ªõi
    const updateData: any = {
      selling_price: tposData.PriceVariant,
      purchase_price: tposData.StandardPrice,
      stock_quantity: tposData.QtyAvailable,
      virtual_available: tposData.VirtualAvailable,
    };

    // Optional fields
    if (tposData.ImageUrl) {
      updateData.tpos_image_url = tposData.ImageUrl;
    }
    if (tposData.Barcode) {
      updateData.barcode = tposData.Barcode;
    }
    if (variantText) {
      updateData.variant = variantText;
    }

    const { error: updateError } = await supabase
      .from("products")
      .update(updateData)
      .eq("id", productId);

    if (updateError) {
      console.error("Error updating variant:", updateError);
      return {
        success: false,
        productCode: tposData.DefaultCode,
        message: updateError.message,
        variantsUpdated: 0,
      };
    }

    return {
      success: true,
      productCode: tposData.DefaultCode,
      message: `Gi√°: ${tposData.PriceVariant.toLocaleString()}ƒë | T·ªìn: ${tposData.QtyAvailable} | D·ª± b√°o: ${tposData.VirtualAvailable}`,
      variantsUpdated: 1,
    };
  } catch (error) {
    console.error(`Error syncing variant ${productId}:`, error);
    return {
      success: false,
      productCode: `ID:${productIdBienThe}`,
      message: error instanceof Error ? error.message : "Unknown error",
      variantsUpdated: 0,
    };
  }
}

/**
 * ƒê·ªìng b·ªô t·∫•t c·∫£ variants v·ªõi batch processing
 */
export async function syncAllVariants(
  onProgress: (progress: SyncProgress) => void
): Promise<void> {
  const BATCH_SIZE = 5;
  const DELAY_BETWEEN_BATCHES = 200;

  // 1. L·∫•y token
  const bearerToken = await getActiveTPOSToken();
  if (!bearerToken) {
    throw new Error("Kh√¥ng t√¨m th·∫•y TPOS bearer token");
  }

  // 2. L·∫•y danh s√°ch variants c√≥ productid_bienthe
  let allVariants: any[] = [];
  let page = 0;
  const pageSize = 1000;

  onProgress({
    current: 0,
    total: 0,
    success: 0,
    failed: 0,
    skipped: 0,
    logs: ["üìä ƒêang t·∫£i danh s√°ch bi·∫øn th·ªÉ..."],
  });

  while (true) {
    const { data, error } = await supabase
      .from("products")
      .select("id, product_code, productid_bienthe")
      .not("productid_bienthe", "is", null)
      .order("created_at", { ascending: false })
      .range(page * pageSize, (page + 1) * pageSize - 1);
    
    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }
    
    if (!data || data.length === 0) break;
    
    allVariants.push(...data);
    
    onProgress({
      current: 0,
      total: 0,
      success: 0,
      failed: 0,
      skipped: 0,
      logs: [`üìä ƒê√£ t·∫£i ${allVariants.length} bi·∫øn th·ªÉ...`],
    });
    
    if (data.length < pageSize) break;
    page++;
  }

  const variants = allVariants;

  if (!variants || variants.length === 0) {
    throw new Error("Kh√¥ng c√≥ bi·∫øn th·ªÉ n√†o c·∫ßn ƒë·ªìng b·ªô");
  }

  const total = variants.length;
  const progress: SyncProgress = {
    current: 0,
    total,
    success: 0,
    failed: 0,
    skipped: 0,
    logs: [],
  };

  // 3. X·ª≠ l√Ω t·ª´ng batch
  for (let i = 0; i < variants.length; i += BATCH_SIZE) {
    const batch = variants.slice(i, i + BATCH_SIZE);
    
    const results = await Promise.all(
      batch.map((variant) =>
        syncSingleVariant(variant.id, variant.productid_bienthe!, bearerToken)
      )
    );

    // C·∫≠p nh·∫≠t progress
    for (const result of results) {
      progress.current++;
      
      if (result.success) {
        progress.success++;
        progress.logs.unshift(
          `‚úÖ ${result.productCode}: ${result.message}`
        );
      } else {
        progress.failed++;
        progress.logs.unshift(
          `‚ùå ${result.productCode}: ${result.message}`
        );
      }

      if (progress.logs.length > 100) {
        progress.logs.pop();
      }
    }

    onProgress({ ...progress });

    if (i + BATCH_SIZE < variants.length) {
      await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
    }
  }
}
